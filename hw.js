function tf(){
    let Tc = 23;
    let Tf;

    Tf = (9 / 5) * Tc + 32;

    alert(Tf);
}
//forcheck
function second(){
    let admin;
    let name="Василий";

    console.log(admin=name)
}


console.log(10 + 10 + "10"); //2010 - конкатенация происходит после сложения цифр 10+10, так как в контексте есть строка 
console.log(10 + "10" + 10); //101010 - здесь полностью конкатенация 
console.log(10 + 10 + +"10"); /* здесь сначала обычная сумма 10+10 первых двух чисел, затем из за знака + перед строкой она 
становится числом поэтому 20+10=30*/
console.log(10 / -"");/*пустое значение это ноль по анологии предыдущего описания в данном случае
 знаменатель становится нулевым числом с отрицательным знаком и следовательно результат бесконечность(-Infinity)*/
console.log(10 / +"2,5");/*NaN, полагаю результат связан с тем что в качестве десятичного разделителя используется запятая, что в js
 воспринимается как последовательность чего либо, а это не число)*/


 // ДЗ2
 //1.
  //пример 1
  let a = -1, b = 1, c, d;
  //c = ++a;
  //alert(c); // ответ: 2 потому что происходит сначала инкремент затем присваивание уже увеличенной переменной a
  //пример 2
  d = b++;
  //alert(d); //ответ: 1 а здесь 1 потому что компилятор сначала присвоил переменной d значение b и только потом увеличил значение b и на данный момент b = 2, 
  //то есть постинкремент служит исключительно для увеличения самого значения переменной, не участвуя в операции присваивания
  //пример 3
  //c = 2 + ++a;
  //alert(c); //ответ: 5 а тут по осторожнее) потому что именно в данном контексте включая выше первые две строчки будет равно 5, потому что инкремент переменной 'а' происходит дважды и равно в данном случае 3 следовательно 2 + 3 равно 5
  //пример 4
  d = 2 + b++;
  //alert(d); //ответ: 4 аналогично объяснению примера 2 постинкремент выполняется после всех операций, в последнюю очередь и для себя
  //alert(a); //3 после третьего примера стало 3
  //alert(b); //3 аналогично после четвертого примера стало 3 разница лишь в том компилятор игнорирует постинкремент переменной для операций с другими переменными(!в контексте), только лишь увеличивает саму переменную для использования этой переменной в дальнейших действиях например(счетчик в цикле)


let aa = parseInt(prompt('Введите a = '));
let bb = parseInt(prompt('Введите b = '));

  if ((aa && bb) <= 0) {
      console.log("отрицательные", (aa - bb));
  } else {
      console.log("положительные", (aa * bb));
  }


  function summ(aa,bb){
      return aa + bb;
  }
  function raznost(aa,bb){
      return aa - bb;
  }
  function delenie(aa,bb){
      return aa/bb;
  }
  function proizved(aa,bb){
      return aa*bb;
  }
  
  summ(aa,bb); 
  raznost(aa, bb); 
  delenie(aa, bb); 

  let operation = prompt('Какую операцию вы хотите произвести? введите соответствующее число: 1 - сумма; 2 - разность; 3 - деление, 4 - произведение.')
  function mathOperation(aa, bb, operation){
      switch(operation){
          case '1': console.log(summ(aa,bb));
          break;
          case '2': console.log(raznost(aa,bb));
          break;
          case '3': console.log(delenie(aa,bb));
          break;
          case '4': console.log(proizved(aa,bb));
          break;
          default: console.log("ввели что то другое");
          break;
      }
  }

  mathOperation(aa, bb, operation);